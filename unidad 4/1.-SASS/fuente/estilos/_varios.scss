@use "sass:map";
@use "sass:math";
@use "sass:string";
@use 'variables';
@use 'media-query';

////@use////
/// 
//Para usar los elementos definidos en un primer módulo en un segundo hay que usar @use en el segundo salvo en las funciones, en cuyo caso SASS es permisivo y permite usarlas en algunos casos cuando se importan a través de un archivo principal (_main.scss). Así, si se importan las funciones y el fichero que las usa en el principal, el que las usa las puede utilizar aunque no tenga @use funciones   

//Cuando usas @use, por defecto, SASS coloca el contenido del archivo importado bajo un namespace basado en el nombre del archivo. Esto significa que debes calificar las variables, funciones y mixins con el nombre del módulo al acceder a ellos. Sin embargo, si deseas acceder a ellos directamente, sin calificar, puedes usar as *.
//Usar as * es útil cuando prefieres no agregar el prefijo del nombre del archivo o cuando necesitas importar muchas variables y no quieres escribir constantemente el nombre del módulo. Sin embargo, usar as * puede hacer que el código sea más difícil de mantener si tienes muchos archivos y variables con nombres similares, ya que no sabrás fácilmente de qué archivo proviene cada variable.

////Comentarios////
//Este comentario no irá en el CSS
/*Este comentario irá en el CSS, salvo que se use el modo comprimido*/
/*!Este comentario siempre irá en el CSS*/

////Variables////
//Ver el fichero _variables.scss
//Las variables pueden ser globales, definidas al principio del documento, fuera de toda clase o etiqueta, o locales, definidas dentro de una clase o etiqueta). En caso de conflicto se usa la local
//Ejemplo 1: Definición de variables globales
$color-primario: #3498db;
$tamaño-fuente: 16px;

// Uso de variables globales
body {
  font-size: $tamaño-fuente;
  background-color: $color-primario;
}

//Ejemplo 2: Definición de variables locales
// Definición de variables locales dentro de un bloque
$color-fondo: #ecf0f1;

.navbar {
  $color-fondo: #2c3e50; // Variable local, definida dentro de .navbar
  background-color: $color-fondo; // Usando la variable local
}


////Interpolación////
//Permite insertar dinámicamente valores dentro de una cadena de texto o un selector, utilizando la sintaxis #{}
//Flexibilidad: Permite crear reglas más dinámicas basadas en valores de variables, sin necesidad de escribir cada regla manualmente.
// Reusabilidad: Puedes generar clases y selectores dinámicamente con el contenido de las variables, haciendo que tu código sea más limpio y fácil de mantener.
// Combinación de valores: Permite combinar strings y variables de forma sencilla, lo que facilita la generación de valores complejos.

//Ejemplo 1: Interplación básica en un comentario
$autor: "Chiquito de la calzada";
/*Web desarrollada por #{$autor}*/

//Ejemplo 2: Interpolación en nombres de clases o IDs
$color: 'red';

// Interpolación para crear una clase con un nombre dinámico
.button-#{$color} {
  background-color: $color;
}

//Ejemplo 3: Interpolación en propiedades CSS
$prefijo: 'font';
$tamaño: 'size';

#{$prefijo}-#{$tamaño} {
  font-size: 16px;
}

//Ejemplo 4: Interpolación para combinaciones de valores
$base: 'color';
$valor: 'blue';

.selector {
  #{$base}-background: $valor;
}

body{
  $color-fondo:rgb(116, 222, 246);
  background-color: variables.$color-fondo;
  color: variables.$color-texto;
}

//Ejemplo 5: Interpolación dentro de URLs:
$image-path: 'images/logo.png';

.selector{
  background-image: url('#{$image-path}');
}


/*FUNCIONES: Ver el archivo _funciones.scss*/


/*MIXINS
Los Mixins permiten reutilizar el mismo código css en diferentes partes invocándolo por su nombre. Permiten usar argumentos 
En este se ha usado una función ("masOscuro", definida en el fichero _funciones.scss)*/

@mixin formato-texto($tamanyo:2rem) { //Se usa un valor por defecto para el parámetro
  text-align: center;
  color: masOscuro(variables.$color-texto);
  font-weight: bold;
  font-size: $tamanyo;
}
//Aquí aplico el mixin, con un argumento, a tres etiquetas y una clase 
main, footer{
  p, .clase{
    @include formato-texto(1.25em);
  }
}

/*ANIDACIÓN DE SELECTORES
Se usa el operador & para referenciar al padre (en este caso a .header)*/
.header {
  width: variables.$anchura;
  margin: 0 auto;

  &-primero {
    color: variables.$color-enlace;
  }

  .segundo{
    color: variables.$color-enlace;
  }
}


//Ejemplo de selectores anidados, mixins con parámetros y uso de fórmulas (en el parámetro del segundo mixin)
nav{
  h1{
    @include formato-texto(2em);
  }
  p{
    @include formato-texto(pasaPXaREM(100));
  }
}


/*LISTAS
Colección de valores, se accede por índice. Primer elemento = 1*/
$tamanyos:(40px, 80px, 160px);
.banner {
  h1{
    font-size: nth($tamanyos,2);  //Selecciono el 2º elemento de la lista tamanyos
  }
}

/*MAPAS
Son parecidos a las listas, pero incorporan una llave para acceder a los valores*/
$error:(
  "leve": 1rem,
  "medio": 2rem,
  "grave": 2.5rem
);

.error-leve{
  font-size: map.get($error, "leve");
}

/*ESTRUCTURAS DE CONTROL

/*EACH
 Puedo recorrer los valores de un mapa o lista y crear clases nuevas usando la interpolación mediante la almohadilla*/
@each $nombre, $value in $error {
  .error-#{$nombre} {
    font-size: $value;
  }
}
/*EACH
cada usuario con su imagen*/
$mapa: (
  pepe: "pepe.png",
  lola: "lola.png",
  manuel: "manuel.png"
);
@each $u, $v in $mapa {
  .perfil-#{$u} {
    background: image-url("img/#{$v}") no repeat;
  }
}

//IF-ELSE
$light-theme: true;
$dark-theme: false;
header {
  @if $light-theme == true {
    background-color: #fff;
    color: #000;
  } @else if $dark-theme {
    background-color: #000;
    color: #fff;
  } @else {
    //Default theme
    background-color: #aaa;
    color: #444;
  }
}

/*WHILE
 cada td de la tabla con un color*/
$num: 1;
$color-list:(#0f0, #00f, orange, #ccc);
@while $num < 5 {
  td:nth-child(#{$num}) {
    color: #f00;
    background-color: nth($color-list, $num);
  }
  $num: $num + 1;
}

/* FOR
cada párrafo de un color*/
@for $i from 1 to 5 {
  p:nth-of-type(#{$i}) {
    color: #f00;
    background-color: nth($color-list, $i);
  }
}

/*RECORRIDO DE MAPAS CON MÁS DE UN VALOR POR CLAVE E INTERPOLACIÓN*/
$buttons: (
  error: (#d82d2d, #666),
  success: (#52bf4a, #fff),
  warning: (#c23435, #fff)
);

.m-button {
  display: inline-block;
  padding: .5em;
  background: #ccc;
  color: #666;

  @each $name, $colors in $buttons {
    $bgcolor: nth($colors, 1);
    $fontcolor: nth($colors, 2);
    &--#{$name} {
      background-color: $bgcolor;
      color: $fontcolor;
    }  
  }
}


/*OPERADORES CONDICIONALES*/
$modo-oscuro:true;
body{
  @if $modo-oscuro {
    color: variables.$color-texto-oscuro;
    background-color: variables.$color-fondo-oscuro;
  }
  @else {
    color: variables.$color-texto-claro;
    background-color: variables.$color-fondo-claro;
  }
}

/*HERENCIA
Si se quiere declarar una regla sólo para que las demás hereden de ella (lo que se llama clase abstracta en algunos lenguajes de programación), se antepone %
Para heredar de un elemento se usa @extend

Herencia vs Mixins
La herencia se usa cuando tiene sentido semánticamente que algunas clases hereden de otras como, por ejemplo, .error-grave y .error-leve podrían heredar de .error los elementos comunes
Si necesitamos usar variables, hay que usar mixins 
*/
%error{  //este elemento sólo existe para que otros hereden de él
  color: red;
}

.error-leve{
  @extend %error;
  font-size: 1rem;
}

.error-grave{
  @extend %error;
  font-size: 2rem;
}


/*Media queries implementadas mediante mixins*/
.texto {
  @include media-query.mixin_media_query(p) {
    color: red;
  }
  @include media-query.mixin_media_query(m) {
      color: green;
    }
  @include media-query.mixin_media_query(g) {
      color: blue;
  }
  

}

/*OPERADORES
The unary operators not, +, -
The *, math.div, and % operators.
The + and - operators.
The >, >=, < and <= operators.
The == and != operators.
The and operator.
The or operator.
The = operator, when it’s available.
*/
//Operadores aritméticos y de comparación
$padding: 50px;
h2 {
  @if($padding <= 20px) {
      padding: $padding;
  } @else {
      padding: math.div($padding, 2);
  }
}


//Operadores lógicos
$list-map: (success: lightgreen, alert: tomato, info: lightblue);
@mixin button-state($btn-state) {
  @if (length($list-map) > 2 and length($list-map) < 5) {
      background-color: map-get($list-map, $btn-state);
  }
}

.btn {
  @include button-state(success);
}


//Operadores de cadenas de texto

@mixin string-concat {
&:after {
    content: "My favorite language is " + Sass;
    font: Arial + " sans-serif";
}
}

h2 {
  @include string-concat;
}