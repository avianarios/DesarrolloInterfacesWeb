/*@use permite incluir */
/*
@import:
    @import is also a CSS feature, and the differences can be confusing
    If you @import the same file multiple times, it can slow down compilation, cause override conflicts, and generate duplicate output.
    Everything is in the global namespace, including third-party packages – so my color() function might override your existing color() function, or vice versa.
    When you use a function like color(). it’s impossible to know exactly where it was defined. Which @import does it come from?

@use
    The file is only imported once, no matter how many times you @use it in a project.
    Variables, mixins, and functions (what Sass calls “members”) that start with an underscore (_) or hyphen (-) are considered private, and not imported.
    Members from the used file (buttons.scss in this case) are only made available locally, but not passed along to future imports.
    Similarly, @extends will only apply up the chain; extending selectors in imported files, but not extending files that import this one.
    All imported members are namespaced by default.
    */

@use 'funciones';
@use 'varios';

/*Las funciones definidas en un módulo pueden ser accesibles sin un @use explícito en algunos casos cuando se importan a través de un archivo principal (_main.scss). Esto se debe a un comportamiento algo permisivo en Sass que permite la propagación de funciones sin necesidad de hacer un @use explícito en los archivos que las necesiten, siempre que el archivo se haya importado previamente.
Las variables de Sass:

Por otro lado, las variables no se propagan de la misma manera que las funciones. Para las variables, es necesario que cada archivo donde se vayan a utilizar haga explícitamente un @use del archivo que las define. Esto se debe a que las variables están asociadas a un espacio de nombres y Sass no permite que se compartan entre archivos a menos que se haga explícitamente.*/

/*if star is not used, namespaces need to be utilized:
    variables.$nombre_variable need to be specified everytime it's used*/

