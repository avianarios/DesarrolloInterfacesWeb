body{
  margin: 0 auto;
  width: 66vw;
  background-color:aliceblue;
}

#formulario-contacto>label{
  display: block;
}

/*A CSS pseudo-class is a selector that selects elements that are in a specific state or in a specific position.*/

/*********************************/
/*Interactive states: due to an interaction a user has with your page
  :hover -> mouse pointer places it over an element
  :active -> an element is actively being interacted with— such as a click—before click is released
  :focus, focus-within and focus-visible -> an element receive focus
*/
a:hover{
  font-size: 2rem;
  text-decoration: none;
  color: red;
}

button:focus {
  outline: #4CAF50 solid 10px;
}

/*********************************/
/*historical state
  :link -> matches any non-visited link (<a> element)
  :visited -> matches any visited link (<a> element)
  :target -> selects any element with an id that matches an URL anchor. If there's an #section1 in URL, it would match id="section1"*/

a:link {
  color: green;
  font-weight: bold
}

a:visited {
  color: purple;
  font-weight: bold;
}

/*********************************/
/*structural -> allows to select elements according to its position or structure in document
  :root -> selects the root element
  :first-child
  :last-child
  :nth-child()
  :nth-last-child() -> nth child starting from the end
  :first-of-type -> first son element of the same type
  :last-of-type -> last son element of the same type
  :nth-of-type() -> nth son of a given type
  :nth-last-of-type() -> nth last son of a given type
  :only-child -> selects a lonely son 
  :only-of-type -> selects an element of a given type which is alone
  :empty
*/
/*selects the first-child of the elements of type "li"*/
li:first-child{
  background: lightskyblue;
  font-weight: bold;
}

li:last-child {
  background: lightgreen;
  font-weight: bold;
}

/*Sets all even elements of a list to have a different background. It also works 2n*/
li:nth-child(even) {
  background: coral;
}
/*Sets all odds elements of a list to have a different background. It also works 2n-1*/
li:nth-child(odd) {
  background-color: aquamarine;
}

/*selects the second child of type li*/
li:nth-child(2){
  background-color: lightpink;
}

/*n would select all elements, 2n even and 2n-1, odds
li:nth-child(n){
  background-color: lightpink;
}

li:nth-child(2n){
  background-color: lightpink;
}

li:nth-child(2n-1){
  background-color: lightpink;
}
*/

/*Selects the 2nd of #parrafos.especial*/
#parrafos :nth-child(2 of .especial){
  background-color: red;
}

/*selects the 2nd li element starting from the end*/
li:nth-last-child(2){
  background-color: lightsalmon;
}

section p:first-of-type{
  background-color: #4CAF50;
}

/*Selects the last paragraph, children at any level, of those elements with a "parrafos" ID*/
#parrafos p:last-of-type{
  background-color: aquamarine;
}

#listaCompra :nth-of-type(2){
  border: 2px dashed green;
}


#parrafos p:nth-last-of-type(2){
  border: 2px dotted red;
}


/*********************************/
/*Logical
  :is -> Allows to replace grouped selectors
  :where
  :has
  :not()

*/
/*
Specifity (a,b,c) 
  a-> number of #ids in selector
  b-> number of .class, [attribute] of :pseudoclass
  c-> number of element of ::pseudoelement


}
  specifity (1,0,1). It's not applied as there's another rule with (1,1,1)

*/
#parrafos > p{
  background-color: bisque;
}

/*
Instead of 
  #parrafos .normal, 
  #parrafos .especial
  #parrafos p{

we could write the following: */

#parrafos :is(.normal, .especial, p){
  background-color: aquamarine;
}

/*Which is the difference?: Specifity (and elegance)
First case: (1,1,0), (1,1,0) and (1,0,1).
Second cas: (1,1,0) at any case
*/

/*same as :is, but specifity of what's included in :where is zero (1,0,0)*/
#parrafos :where(.normal, .especial, p){
  background-color: aquamarine;
}

/*selects parents who has a given child*/
/*not fully supported check caniuse.com*/
section:has(article#gato){
  border: 3px dotted blue;
}

p:not(.especial){
  border: 3px dashed red;
}


/*********************************/
/*form states
  :checked
  :indeterminate
  :enabled
  :disabled -> user can't change. No information is sent
  :read-only -> user can't change, but information is sent
  :read-write
  :placeholder-shown
  :default -> elements with a default value
*/

input:checked+label{
  color:coral;
}

input:disabled+label{
  color:gray;
}

input:placeholder-shown {
  color:coral;
}

/*form validation
  :required
  :optional -> not required
  :valid
  :invalid
  :user-valid
  :user-invalid
  :in-range
  :out-of-range
*/

/*select label before a required input*/
label:has(+input:required){
  color: red;
}

input:required{
  border: 3px solid red;
}

/*valid and in-range can be applied at the same time*/
input:invalid {
  color: red;
}

/*applied to all valid elements when restrictions are applied on a form*/
input:valid {
  color: green;
}

/*controls what happens when values in a form field are between min and max property values*/
input:in-range {
  color: green;
}

/*controls what happens when values in a form field are not between min and max property values*/
input:out-of-range{
  color: red;
}
