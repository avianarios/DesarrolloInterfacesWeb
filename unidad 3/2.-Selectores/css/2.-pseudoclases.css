body{
  margin: 0 auto;
  width: 66vw;
  background-color:aliceblue;
}

#formulario-contacto>label{
  display: block;
}

/*A CSS pseudo-class is a selector that selects elements that are in a specific state or in a specific position.*/

/*********************************/
/*Interactive states: due to an interaction a user has with your page
  :hover -> mouse pointer places it over an element
  :active -> an element is actively being interacted with— such as a click—before click is released
  :focus, focus-within and focus-visible -> an element receive focus
*/
a:hover{
  font-size: 2rem;
  text-decoration: none;
  color: red;
}

button:focus {
  outline: #4CAF50 solid 10px;
}

/*********************************/
/*historical state
  :link -> matches any non-visited link (<a> element)
  :visited -> matches any visited link (<a> element)
  :target -> selects any element with an id that matches an URL anchor. If there's an #section1 in URL, it would match id="section1"*/

a:link {
  color: green;
  font-weight: bold
}

a:visited {
  color: purple;
  font-weight: bold;
}

/*********************************/
/*structural -> allows to select elements according to its position or structure in document
  :root -> selects the root element
  :first-child -> selects the first child
  :last-child
  :nth-child()
  :nth-last-child() -> nth child starting from the end
  :first-of-type -> first son element of the same type
  :last-of-type -> last son element of the same type
  :nth-of-type() -> nth son of a given type
  :nth-last-of-type() -> nth last son of a given type
  :only-child -> selects a lonely son 
  :only-of-type -> selects an element of a given type which is alone
  :empty
*/

/*applies style ONLY if the first-child of the parent container is a "li" tag*/
li:first-child{
  background: lightskyblue;
  font-weight: bold;
}

/*applies style ONLY if the last-child of the parent container is a "li" tag*/
li:last-child {
  background: lightgreen;
  font-weight: bold;
}

/*applies style to all even elements of a list. It also works 2n*/
li:nth-child(even) {
  background: coral;
}

/*applies style to all odds elements of a list. It also works 2n-1 or 2n+1*/
li:nth-child(odd) {
  background-color: aquamarine;
}

/*applies style only if the second child of the parent container is a "li" tag*/
li:nth-child(2){
  background-color: lightpink;
}

/*selects all elements*/
li:nth-child(n){
  background-color: lightpink;
}

/*Selects the second child that has the .especial class within the #parrafos container*/
#parrafos :nth-child(2 of .especial){
  background-color: red;
}

/*selects the 2nd li element starting from the end*/
li:nth-last-child(2){
  background-color: lightsalmon;
}

/*Selects first p element after a section (even if it's not the first child)*/
section p:first-of-type{
  background-color: #4CAF50;
}

/*applies style to the last paragraph of those articles with a "parrafos" ID*/
article#parrafos p:last-of-type{
  background-color: aquamarine;
}

/*Selects the 2nd child (doesn't matter the type) of an element with "listaCompra" ID*/
#listaCompra :nth-of-type(2){
  border: 2px dashed green;
}

/*applies style to the third element of type li*/
li:nth-of-type(3){
  background-color: cornflowerblue;
}

/*applies style to the paragraph before the last one of an container with "parrafos" ID*/
#parrafos p:nth-last-of-type(2){
  border: 2px dotted red;
}


/*********************************/
/*Logical
  :is -> groups several selectors and takes the highest specificity among the selectors it contains
  :where -> groups several selectors and takes the lowest specificity among the selectors it contains
  :has -> selects a parent element if it contains a child that matches the selectors specified within :has().
  :not() -> selects an element not matching the selectors specified within :not

How to apply CSS rules?
  -When two or more selectors match the same element, the selector with the higher specificity is applied. 
  -If two selectors have the same specificity, the last one in the code is applied.

What is specifity?
  It determines which style rules apply to an element when there are multiple matching selectors.
  
  The specificity of a CSS selector is calculated by adding up the number of each type of selector it contains, with the following priorities:
  Specifity (a,b,c,d) 
    a-> number of #ids in selector
    b-> number of .class, [attribute] of :pseudoclass
    c-> number of element of ::pseudoelement
    d-> number of universal selectors
*/


/*
Instead of 
  #parrafos .normal, 
  #parrafos .especial
  #parrafos p{

we could write the following: */
#parrafos:is(.normal, .especial, p){
  background-color: aquamarine;
}
/*
specificity: 
  #parrafos .normal: 1,1,0
  #parrafos .especial: 1,1,0
  #parrafos p: 1,0,1

"is" has no specifity. It just takes the maximum among its selectors (0,1,0) and then it just adds to the specifity of the selector before "is" (1,0,0) resulting in (1,1,0)

Which is the difference?: Specifity (and elegance)
  First case: (1,1,0), (1,1,0) and (1,0,1).
  Second case: (1,1,0) at any case
*/

/*where groups rules as :is, but its specifity is always zero*/
#parrafos:where(.normal, .especial, p){
  background-color: aquamarine;
}
/*
Therefore, the specifity of the whole rule is (1,0,0) due to #parrafos
*/

/*applies style to a <section> that contains an <article> with gato ID*/
/*not fully supported. check caniuse.com*/
section:has(article#gato){
  border: 3px dotted blue;
}

/*Selects paragraphs which don't have an especial class*/
p:not(.especial){
  border: 3px dashed red;
}


/*********************************/
/*form states
  :checked
  :indeterminate
  :enabled
  :disabled -> user can't change. No information is sent
  :read-only -> user can't change, but information is sent
  :read-write
  :placeholder-shown
  :default -> elements with a default value
*/

/*applies styles to a <label> tag that is an adjacent brother (immediately follows) of a checked <input> element*/
input:checked+label{
  color:coral;
}

/*applies styles to a <label> tag that is an adjacent brother (immediately follows) of a disabled <input> element*/
input:disabled+label{
  color:gray;
}

/*applies styles to <input> elements where the placeholder is being displayed (when the user has not entered any value and the helping placeholder text is visible)*/
input:placeholder-shown {
  color:coral;
}

/*form validation
  :required
  :optional -> not required
  :valid
  :invalid
  :user-valid
  :user-invalid
  :in-range
  :out-of-range
*/

/*applies style to a label right before (adjacent brother) a required input*/
label:has(+input:required){
  color: red;
}
/*What if web browser doesn't support has? JavaScript
document.querySelectorAll('input[required]').forEach(input => {
  const label = input.previousElementSibling;
  if (label && label.tagName === 'LABEL') {
    label.style.color = 'red';
  }
});
*/

input:required{
  border: 3px solid red;
}

/*applies style to a non-valid form input, according to the validation form rules
  -If an input field with the required attribute is empty.
  -If an input field with an email type contains text that does not conform to a valid email format.
  -If an input field of type number contains a value outside the range allowed by the min or max attributes.*/
input:invalid {
  color: red;
}

/*applies style to a valid form input*/
input:valid {
  color: green;
}

/*applies style to an input field whose values are between min and max property values*/
input:in-range {
  color: green;
}

/*applies style to an input whose values are not between min and max property values*/
input:out-of-range{
  color: red;
}
